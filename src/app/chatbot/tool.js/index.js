const { tool } = require("@langchain/core/tools");
const { default: axios } = require("axios");
const { z } = require("zod");
const fs = require("fs");
const { model } = require("../../utils");
const { HumanMessage } = require("@langchain/core/messages");
const { chatCustomTool } = require("../chatCustomTool");
const cron = require("node-cron");

const selectProductSchema = z.object({
  product: z.string(),
});
const weatherSchema = z.object({
  city: z.string(),
});
const priceProductSchema = z.object({
  product: z.string().optional(), // c√≥ th·ªÉ l√† undefined n·∫øu d√πng context
  package: z.string().optional(), // v√≠ d·ª•: "basic", "pro", "premium", "1 th√°ng", "12 th√°ng"
});

const selectPackageSchema = z.object({
  product: z.string().optional(), // c√≥ th·ªÉ l√† undefined n·∫øu d√πng context
  package: z.string(), // v√≠ d·ª•: "basic", "pro", "premium", "1 th√°ng", "12 th√°ng"
});
const customerInfoSchema = z.object({
  name: z.string(),
  phone: z.string().regex(/^\d{9,11}$/),
  email: z.string().email().optional(),
});

const submitOrderSchema = z.object({
  product: z.string(),
  package: z.string(), // v√≠ d·ª•: "basic", "pro", "premium", "1 th√°ng", "12 th√°ng"
  name: z.string(),
  phone: z.string().regex(/^\d{9,11}$/),
  email: z.string().email().optional(),
});

const commandMeSchema = z.object({
  target: z.string(),
  time: z.any(),
});

const advisoryNews = tool(
  async () => {
    return `B·∫°n mu·ªën ƒë∆∞·ª£c t∆∞ v·∫•n v·ªÅ d·ªãch v·ª• g√¨?`;
  },
  {
    name: "advisoryNews",
    description: "Ng∆∞·ªùi d√πng mu·ªën b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán.",
  }
);

const suggestProduct = tool(
  async (input) => {
    return `Hi·ªán t·∫°i ƒëang c√≥ nh·ªØng d·ªãch v·ª• nh∆∞: Cpaas, Callbot, KYC, MyID`;
  },
  {
    name: "suggestProduct",
    description:
      "D√πng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ d·ªãch v·ª• n√†o (VD: 'C√≥ nh·ªØng d·ªãch v·ª• g√¨', 'ƒêang c√≥ d·ªãch v·ª• n√†o', v.v.)",
  }
);
const selectProduct = tool(
  async (input, runContext) => {
    context.selectedProduct = input.product;
    const product =
      input.product || runContext?.configurable?.context?.selectedProduct;

    if (!product) {
      return "B·∫°n ch∆∞a ch·ªçn d·ªãch v·ª• n√†o ƒë·ªÉ t√¥i b√°o gi√°.";
    }
    return `Hi·ªán t·∫°i d·ªãch v·ª• ${product} ƒëang c√≥ c√°c g√≥i c∆∞·ªõc nh∆∞ l√†... (v√≠ d·ª•: 'G√≥i Pro ${product}', '1 th√°ng ${product}', '12 th√°ng ${product}', v.v.)`;
  },
  {
    name: "selectProduct",
    description:
      "D√πng khi ng∆∞·ªùi d√πng mu·ªën h·ªèi v·ªÅ c√°c g√≥i c∆∞·ªõc c·ªßa d·ªãch v·ª• ƒë√£ ch·ªçn (v√≠ d·ª•: 'Callbot', 'Chatbot', 'T√¥i mu·ªën xem c√°c g√≥i c∆∞·ªõc Chatbot', v.v)",
    schema: selectProductSchema,
  }
);

const selectPackage = tool(
  async (input, runContext) => {
    const product =
      input.product || runContext?.configurable?.context?.selectedProduct;

    if (!product) {
      return "B·∫°n ch∆∞a ch·ªçn d·ªãch v·ª• n√†o ƒë·ªÉ t√¥i b√°o gi√°.";
    } else if (!input.package) {
      return "B·∫°n ch∆∞a ch·ªçn g√≥i c∆∞·ªõc cho d·ªãch v·ª•";
    }
    context.selectpackage = input.package;

    return `B·∫°n ƒë√£ ch·ªçn g√≥i d·ªãch v·ª•: ${product} - ${input.package}. Nh·∫≠p th√¥ng tin T√™n, SƒêT, Email ƒë·ªÉ ƒë·∫∑t h√†ng`;
  },
  {
    name: "selectPackage",
    description:
      "D√πng khi ng∆∞·ªùi d√πng x√°c nh·∫≠n ch·ªçn g√≥i c∆∞·ªõc v·ª´a ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t (VD: 'G√≥i Pro', '1 th√°ng', '12 th√°ng', 'T√¥i mu·ªën ch·ªçn g√≥i Pro cho Cpaas', 'Cpaas - 1 th√°ng' v.v.)",
    schema: selectPackageSchema,
  }
);
const priceProduct = tool(
  async (input, runContext) => {
    const product =
      input.product || runContext?.configurable?.context?.selectedProduct;
    const package =
      input.package || runContext?.configurable?.context?.selectPackage;
    if (!product) {
      return "B·∫°n ch∆∞a ch·ªçn d·ªãch v·ª• n√†o ƒë·ªÉ t√¥i b√°o gi√°.";
    } else if (!package) {
      return "B·∫°n ch∆∞a ch·ªçn g√≥i c·ªßa d·ªãch v·ª•. VD: G√≥i pro, g√≥i 1 th√°ng, v.v";
    }
    return `Gi√° c·ªßa d·ªãch v·ª• ${product} v·ªõi g√≥i ${package} l√† ... (v√≠ d·ª•: 500.000 VNƒê/th√°ng)`;
  },
  {
    name: "priceProduct",
    description: `D√πng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ gi√° d·ªãch v·ª•, k·ªÉ c·∫£ n·∫øu h·ªç n√≥i chung chung nh∆∞ 'gi√° c·ªßa n√≥', 'gi√° d·ªãch v·ª• ƒë√≥'...`,
    schema: priceProductSchema,
  }
);

const inputCustomerInfo = tool(
  async (input, runContext) => {
    context.customer = input;
    const product =
      input.product || runContext?.configurable?.context?.selectedProduct;
    const package =
      input.package || runContext?.configurable?.context?.selectPackage;
    return `ƒê√£ nh·∫≠n th√¥ng tin kh√°ch h√†ng: D·ªãch v·ª•: ${product}, G√≥i: ${package}, T√™n: ${input.name}, SƒêT: ${input.phone}. G·ª≠i 'X√°c nh·∫≠n' ƒë·ªÉ ho√†n t·∫•t`;
  },
  {
    name: "inputCustomerInfo",
    description:
      "D√πng khi ng∆∞·ªùi d√πng cung c·∫•p th√¥ng tin c√° nh√¢n ƒë·ªÉ ƒëƒÉng k√Ω d·ªãch v·ª•",
    schema: customerInfoSchema,
  }
);

const submitOrder = tool(
  async (input) => {
    const { selectedProduct, selectpackage, customer } = context;
    if (
      !(selectedProduct || input.product) ||
      !(selectpackage || input.package) ||
      !(customer || input.name)
    ) {
      return "B·∫°n c·∫ßn ch·ªçn d·ªãch v·ª•, g√≥i v√† cung c·∫•p th√¥ng tin tr∆∞·ªõc khi ƒë·∫∑t.";
    }

    // V√≠ d·ª•: x·ª≠ l√Ω ƒë∆°n h√†ng ·ªü ƒë√¢y (g·ªçi API backend, ghi DB, v.v.)
    return `‚úÖ ƒê·∫∑t d·ªãch v·ª• th√†nh c√¥ng!\nD·ªãch v·ª•: ${
      input.product || selectedProduct
    }\nG√≥i: ${input.package || selectpackage}\nKh√°ch h√†ng: ${
      input.name || customer.name
    } - ${input.phone || customer.phone}`;
  },
  {
    name: "submitOrder",
    description: `
D√πng khi ng∆∞·ªùi d√πng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ ƒëƒÉng k√Ω d·ªãch v·ª• trong c√πng m·ªôt tin nh·∫Øn. 
Th√¥ng tin bao g·ªìm: t√™n d·ªãch v·ª• (product), g√≥i d·ªãch v·ª• (package), h·ªç t√™n (name), s·ªë ƒëi·ªán tho·∫°i (phone), 
c√≥ th·ªÉ k√®m email. V√≠ d·ª•:

- "T√¥i mu·ªën ƒë·∫∑t d·ªãch v·ª• Vbot g√≥i 2 th√°ng. T√™n Nguy·ªÖn VƒÉn A, SƒêT 0909123456"
- "ƒêƒÉng k√Ω Cpaas - 1 th√°ng. T√™n Minh, s·ªë 0888123456, email minh@gmail.com"
`,
    schema: submitOrderSchema,
  }
);

const weatherTool = tool(
  async (input) => {
    try {
      const api = process.env.OPENWEATHER_API_KEY;
      const cityList = JSON.parse(
        fs.readFileSync("./src/data/city.list.json", "utf-8")
      );
      const city = cityList.filter((item) => item.name == input.city);
      const response = await axios.get(
        `https://api.openweathermap.org/data/2.5/weather?id=${city[0].id}&appid=${api}`
      );
      const prompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω th·ªùi ti·∫øt. T√¥i s·∫Ω cung c·∫•p d·ªØ li·ªáu JSON t·ª´ API th·ªùi ti·∫øt OpenWeather, 
h√£y ph√¢n t√≠ch v√† tr·∫£ v·ªÅ th√¥ng tin d·ªÖ hi·ªÉu cho ng∆∞·ªùi d√πng.

D·ªØ li·ªáu JSON:
${JSON.stringify(response.data, null, 2)}

Y√™u c·∫ßu:
- N√™u r√µ ƒë·ªãa ƒëi·ªÉm (t√™n th√†nh ph·ªë, qu·ªëc gia n·∫øu c√≥).
- Nhi·ªát ƒë·ªô hi·ªán t·∫°i l√† bao nhi√™u ƒë·ªô C?
- Th·ªùi ti·∫øt c√≥ n·∫Øng, m∆∞a hay m√¢y? (m√¥ t·∫£ chi ti·∫øt).
- T·ªëc ƒë·ªô gi√≥ l√† bao nhi√™u?
- ƒê·ªô ·∫©m hi·ªán t·∫°i l√† bao nhi√™u ph·∫ßn trƒÉm?
- N·∫øu c√≥ c·∫£nh b√°o th·ªùi ti·∫øt ƒë·∫∑c bi·ªát th√¨ h√£y n√™u r√µ.

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, vƒÉn phong th√¢n thi·ªán, d·ªÖ hi·ªÉu. Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng tr√™n, ƒë·ª´ng g·ªôp v√†o m·ªôt ƒëo·∫°n vƒÉn.
`;
      const llm = await model.invoke([new HumanMessage(prompt)]);
      return llm.content;
    } catch (err) {}
  },
  {
    name: "weatherTool",
    description:
      "D√πng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ d·∫Ω li·ªáu th·ªùi ti·∫øt c·ª• th·ªÉ theo ng√†y ho·∫∑c chung chung",
    schema: weatherSchema,
  }
);

const commandMe = tool(
  async (input) => {
    console.log("input: ", input);
    cron.schedule("7 23 * * *", async () => {
      console.log("üìÖ B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt m·ªói ph√∫t ...");

      // chatCustomTool({ content: "Th·ªùi ti·∫øt ·ªü Lao Cai" }).then((result) => {
      //   console.log("result: ", result);
      //   socket.emit("chatTool-response", result.join("/n"));
      // });
    });
    return 'aaa'
  },
  {
    name: "commandMe",
    description:
      "D√πng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ v·∫•n ƒë·ªÅ l·∫∑p l·ªãch cho 1 v·∫•n ƒë·ªÅ g√¨ ƒë√≥ VD: 'L·∫•y d·ªØ li·ªáu gi√° v√†ng h√†ng ng√†y', 'L·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt theo gi·ªù', v.v",
    schema: commandMeSchema,
  }
);

module.exports = {
  advisoryNews,
  suggestProduct,
  selectProduct,
  selectPackage,
  priceProduct,
  inputCustomerInfo,
  submitOrder,
  weatherTool,
  commandMe,
};
